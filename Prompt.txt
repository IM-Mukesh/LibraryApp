I need to create a multi-step form infrastructure for a React Native student enrollment form. This should include:

1. A main container component that manages 4 steps with horizontal sliding animations
2. Custom hooks for form state management and swipe navigation
3. Step indicator component with progress animation
4. Navigation controls (Next/Previous buttons)
5. Ultra-smooth animations using native drivers
6. Complete TypeScript implementation
7. Professional responsive design
8. No Expo libraries - pure React Native

Requirements:
- Horizontal sliding between steps with momentum-based swipe detection
- Spring animations for smooth transitions
- Form state persistence across steps
- Step-wise validation system
- Progress indicator with animated progress bar
- Gesture-based navigation with PanGestureHandler
- Memory efficient implementation
- Professional modern UI design

The form should have 4 steps:
1. Personal Identity (Name, Mobile, Aadhar)
2. Family & Demographics (Father's Name, Date of Birth, Gender)
3. Location & Academic (Address, Shift)
4. Dates & Confirmation (Joining Date, Next Due Date, Review)

Create the infrastructure components and hooks that will work with my existing UI components.


Files to Attach with Prompt 1:

theme.ts (Colors, Spacing, FontSizes, Radius)
student.types.ts (interfaces and types)
validation.ts (validation utilities)


Expected Output from Prompt 1:

MultiStepFormContainer.tsx
hooks/useMultiStepForm.ts
hooks/useSwipeNavigation.ts
components/StepIndicator.tsx
components/StepNavigation.tsx
utils/stepValidation.ts






I need to create the first two step components for my multi-step student enrollment form. These should integrate with the infrastructure created in the previous prompt.

Create Step 1 (Personal Identity) and Step 2 (Family & Demographics) components with:

1. PersonalIdentityStep.tsx - Contains Name, Mobile, Aadhar fields
2. FamilyDemographicsStep.tsx - Contains Father's Name, Date of Birth, Gender fields

Requirements:
- Use my existing AnimatedInput, AnimatedPicker, and DatePicker components
- NO icons in input fields
- Professional modern design with proper spacing
- Real-time validation integration
- Smooth entrance/exit animations
- Responsive layout for different screen sizes
- Complete TypeScript implementation
- Form field focus management
- Error state handling per step
- Clean section-based layouts

Note: Replace age with Date of Birth field and auto-calculate age from DOB.


Files to Attach with Prompt 2:

AnimatedInput.tsx
AnimatedPicker.tsx
DatePicker.tsx
theme.ts
student.types.ts
validation.ts
Output files from Prompt 1

Expected Output from Prompt 2:

steps/PersonalIdentityStep.tsx
steps/FamilyDemographicsStep.tsx
Updated stepValidation.ts with DOB validation
Updated student.types.ts if needed











I need to create the remaining two step components for my multi-step student enrollment form.

Create Step 3 (Location & Academic) and Step 4 (Dates & Confirmation) components with:

1. LocationAcademicStep.tsx - Contains Address and Shift fields
2. DatesConfirmationStep.tsx - Contains Joining Date, Next Due Date, and Review Summary

Requirements:
- Use my existing AnimatedInput, AnimatedPicker, and DatePicker components
- NO icons in input fields
- Step 4 should include an editable summary/review of all entered data
- Professional modern design with proper spacing
- Real-time validation integration
- Smooth entrance/exit animations
- Responsive layout for different screen sizes
- Complete TypeScript implementation
- Form field focus management
- Error state handling per step
- Clean section-based layouts
- Review screen should allow direct editing of fields
- Final submission integration

The review screen should display all form data in a clean, organized manner with the ability to edit any field inline.



Files to Attach with Prompt 3:

AnimatedInput.tsx
AnimatedPicker.tsx
DatePicker.tsx
AnimatedButton.tsx
theme.ts
student.types.ts
validation.ts
Output files from Prompt 1 & 2

Expected Output from Prompt 3:

steps/LocationAcademicStep.tsx
steps/DatesConfirmationStep.tsx
Updated validation utilities
Review/Summary component







I need to integrate all the multi-step form components and replace my original StudentEnrollmentForm with the new multi-step version.

Tasks:
1. Create the final MultiStepStudentEnrollmentForm component that integrates all steps
2. Replace the original single-page form with the multi-step version
3. Ensure all API integration works correctly
4. Add proper loading states and error handling
5. Implement form reset functionality
6. Add success/failure handling with proper navigation
7. Ensure all animations are optimized and smooth
8. Add accessibility features
9. Final responsive design touches
10. Performance optimizations

Requirements:
- Complete integration with existing Redux state management
- Proper API integration with createStudent function
- Loading states during submission
- Error handling and user feedback
- Success navigation back to student list
- Form reset after successful submission
- Memory efficient implementation
- Professional error messages and user guidance
- Smooth performance on all devices
- Complete TypeScript implementation

The final component should be a drop-in replacement for the original StudentEnrollmentForm.




Files to Attach with Prompt 4:

Original StudentEnrollmentForm.tsx
AnimatedButton.tsx
theme.ts
student.types.ts
validation.ts
All output files from Prompts 1, 2, and 3
Any API integration files (api.ts if available)

Expected Output from Prompt 4:

MultiStepStudentEnrollmentForm.tsx (Final integrated component)
Updated navigation integration
Performance optimizations
Accessibility improvements
Final bug fixes and polish
Documentation/comments for maintenance







Usage Instructions:

Run Prompt 1 first to create the infrastructure
Run Prompt 2 to create the first two steps
Run Prompt 3 to create the remaining steps
Run Prompt 4 to integrate everything and replace the original form

Each prompt builds upon the previous one, so make sure to attach all the generated files from previous prompts along with the specified original files.
This approach ensures:

✅ No dependency issues between prompts
✅ Consistent design and functionality
✅ Professional code quality
✅ Complete TypeScript implementation
✅ Optimal performance
✅ Easy maintenance and updates
RetryClaude does not have the ability to run the code it generates yet.Claude can make mistakes. Please double-check responses.